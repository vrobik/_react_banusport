{"version":3,"sources":["views/players/Players.js"],"names":["Players","scoreTeam1","scoreTeam2","localHash","localStorage","getItem","history","useHistory","useState","modal","setModal","details","setDetails","teams","setTeams","players","setPlayears","editMode","setEditMode","editPlayer","setEditPlayer","playersRows","setPlayersRows","playersDataSheet","setPlayersDataSheet","perpage","setPerpage","toasts","setToasts","process","REACT_APP_GOOGLESHEET_ID","REACT_APP_CLIENT_EMAIL","REACT_APP_PRIVATE_KEY","REACT_APP_SHEET_ID","doc","GoogleSpreadsheet","readSpreadsheet","a","useServiceAccountAuth","client_email","private_key","loadInfo","sheet","sheetsById","getRows","console","error","length","then","rows","Object","keys","map","player","i","id","phone","idRow","name","photo","note","pozitiile","queryPage","useLocation","search","match","currentPage","Number","pages","Math","ceil","page","setPage","addToast","type","content","position","autohide","closeButton","fade","toasters","reduce","toast","push","createTeams","myType","playersData","team1","team2","atac","1","2","3","4","mid","def","goal","forEach","includes","poz","split","at","sort","e","s","parseInt","filter","f","slice","pop","values","b","playersRandom","random","getPositions","pos","editPlayerData","payload","changes","data","value","updatePlayerData","errors","nota","telefon","pz","uniq","pozitii","save","cp","toggleEditMode","editId","CryptoJS","MD5","toString","pass","prompt","setItem","useEffect","xl","className","col","sm","md","color","onClick","items","fields","key","label","_style","width","sorter","_classes","tableFilter","placeholder","itemsPerPageSelect","onPaginationChange","hover","striped","itemsPerPage","activePage","scopedSlots","item","size","shape","variant","labelOn","labelOff","checked","onChange","p","join","index","indexOf","newDetails","splice","toggleDetails","show","lg","min","max","target","disabled","src","onActivePageChange","newPage","align","toasterKey","param","pl","style","textTransform","renderToast","onClose","toFixed"],"mappings":"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","file":"static/js/5.649e7d52.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport {\n  CCard, CCardBody, CCardHeader, CCol, CDataTable,\n  CRow, CPagination, CCardImg, CCollapse, CButton,\n  CButtonGroup, CSwitch, CToaster, CToast, CToastHeader,\n  CToastBody, CModalHeader,\n  CModalTitle, CModalBody, CModalFooter, CModal, CFormText,\n  CInputGroup, CInputGroupPrepend, CInputGroupText, CInput\n} from '@coreui/react'\nimport CryptoJS from 'crypto-js';\nimport {GoogleSpreadsheet} from 'google-spreadsheet';\n// import info from \"./info_no_secrets\";\n\nconst Players = () => {\n  let scoreTeam1 = 0;\n  let scoreTeam2 = 0;\n  let localHash = localStorage.getItem('pass');\n  const history = useHistory();\n  const [modal, setModal] = useState(false)\n  const [details, setDetails] = useState([]);\n  const [teams, setTeams] = useState([]);\n  const [players, setPlayears] = useState([]);\n  const [editMode, setEditMode] = useState([]);\n  const [editPlayer, setEditPlayer] = useState({});\n  const [playersRows, setPlayersRows] = useState([]);\n  const [playersDataSheet, setPlayersDataSheet] = useState([]);\n  const [perpage, setPerpage] = useState(10);\n  const [toasts, setToasts] = useState([]);\n  const {\n    REACT_APP_GOOGLESHEET_ID,\n    REACT_APP_CLIENT_EMAIL,\n    REACT_APP_PRIVATE_KEY,\n    REACT_APP_SHEET_ID,\n    // REACT_APP_SHEET_ID_TEST\n  } = process.env;\n  const doc = new GoogleSpreadsheet(REACT_APP_GOOGLESHEET_ID);\n  const readSpreadsheet = async () => {\n    try {\n      await doc.useServiceAccountAuth({\n        client_email: REACT_APP_CLIENT_EMAIL,\n        private_key: REACT_APP_PRIVATE_KEY,\n      });\n      await doc.loadInfo();\n      const sheet = doc.sheetsById[REACT_APP_SHEET_ID];\n      // const sheet = doc.sheetsById[REACT_APP_SHEET_ID_TEST];\n      return await sheet.getRows();\n    } catch (e) {\n      console.error('Error: ', e);\n    }\n  };\n  if(playersDataSheet.length === 0) {\n    readSpreadsheet().then((rows) => {\n      setPlayersRows(rows);\n      setPlayersDataSheet( Object.keys(rows).map(( player, i ) => ({\n          id: rows[player].phone,\n          idRow: i,\n          name: rows[player].name,\n          phone: rows[player].phone,\n          photo: rows[player].photo,\n          note: rows[player].note,\n          pozitiile: rows[player].pozitiile,\n        })\n        )\n      );\n    });\n  }\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, '');\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n  const pages = Math.ceil(playersDataSheet.length / perpage);\n  const [page, setPage] = useState(currentPage);\n\n  // EVENTS\n  const addToast = (type, content = \"\") => {\n    setToasts([\n      ...toasts,\n      { position: 'top-right', autohide: type === 'errors' ? 3000 : 1000, closeButton: true, fade: true, type, content }\n    ])\n  }\n  const toasters = (()=>{\n    return toasts.reduce((toasters, toast) => {\n      toasters[toast.position] = toasters[toast.position] || []\n      toasters[toast.position].push(toast)\n      return toasters\n    }, {})\n  })()\n  const pageChange = newPage => {\n    currentPage !== newPage && history.push(`/players?page=${newPage}`);\n  }\n  const togglePlayer = (id) => {\n    if(players.length === 12 && !players.includes(id)) {\n      addToast('full');\n    }else {\n      if (players.includes(id)) {\n        setPlayears([...(players.filter(e => e !== id))]);\n      } else {\n        setPlayears([...players, id]);\n      }\n      addToast('change');\n    }\n  }\n  const toggleDetails = (index) => {\n    const position = details.indexOf(index)\n    let newDetails = details.slice()\n    if (position !== -1) {\n      newDetails.splice(position, 1)\n    } else {\n      newDetails = [...details, index]\n    }\n    setDetails(newDetails)\n  }\n  const renderToast = (param) => {\n    switch (param.type){\n      case 'full':\n        return `Maximul jucatorilor este 12`;\n      case 'low':\n        return `Minimul de jucatorilor este 12`;\n      case 'noteams':\n        return `Generaza echipele!`;\n      case 'pass':\n        return `Wrong Password!!!`;\n      case 'change':\n        return Object.keys(playersDataSheet).map(pl => {\n          return (\n            players.includes(playersDataSheet[pl].id) ? <p key={playersDataSheet[pl].id}><b>{`${playersDataSheet[pl].name}`}</b></p> : ``\n          )\n        });\n      case 'errors':\n        return Object.keys(param.content).map(pl => <p key={pl}><b style={{textTransform: \"capitalize\"}} >{`${pl}`}: </b> {`${param.content[pl]}`}</p>);\n      default:\n        break\n    }\n  }\n  const createTeams = (myType) => {\n    if( players.length < 12 ) {\n      addToast('low');\n    }else {\n      let playersData = {};\n      let team1 = [];\n      let team2 = [];\n      if( typeof myType === \"undefined\" || myType === 'position' ) {\n        // console.log('BY POSITION');\n        const atac = {1: [], 2: [], 3: [], 4: []};\n        const mid = {1: [], 2: [], 3: [], 4: []};\n        const def = {1: [], 2: [], 3: [], 4: []};\n        const goal = {1: [], 2: [], 3: [], 4: []};\n        playersDataSheet.forEach(player => {\n          if (players.includes(player.id)) {\n            playersData[player.id] = player;\n            const poz = player.pozitiile.split('.');\n            switch (poz[0]) {\n              case '1':\n                atac[1] = [...atac[1], player];\n                break\n              case '2':\n                mid[1] = [...mid[1], player];\n                break\n              case '3':\n                def[1] = [...def[1], player];\n                break\n              case '4':\n                goal[1] = [...goal[1], player];\n                break\n              default:\n                break\n            }\n            switch (poz[1]) {\n              case '1':\n                atac[2] = [...atac[2], player];\n                break\n              case '2':\n                mid[2] = [...mid[2], player];\n                break\n              case '3':\n                def[2] = [...def[2], player];\n                break\n              case '4':\n                goal[2] = [...goal[2], player];\n                break\n              default:\n                break\n            }\n            switch (poz[2]) {\n              case '1':\n                atac[3] = [...atac[3], player];\n                break\n              case '2':\n                mid[3] = [...mid[3], player];\n                break\n              case '3':\n                def[3] = [...def[3], player];\n                break\n              case '4':\n                goal[3] = [...goal[3], player];\n                break\n              default:\n                break\n            }\n            switch (poz[3]) {\n              case '1':\n                atac[4] = [...atac[4], player];\n                break\n              case '2':\n                mid[4] = [...mid[4], player];\n                break\n              case '3':\n                def[4] = [...def[4], player];\n                break\n              case '4':\n                goal[4] = [...goal[4], player];\n                break\n              default:\n                break\n            }\n          }\n        })\n        Object.keys(atac).map(at => atac[at].sort((e, s) => parseInt(s.note, 10) - parseInt(e.note, 10)));\n        Object.keys(mid).map(at => mid[at].sort((e, s) => parseInt(s.note, 10) - parseInt(e.note, 10)));\n        Object.keys(def).map(at => def[at].sort((e, s) => parseInt(s.note, 10) - parseInt(e.note, 10)));\n        Object.keys(goal).map(at => goal[at].sort((e, s) => parseInt(s.note, 10) - parseInt(e.note, 10)));\n        team1 = [...atac[1].filter((f, i) => i % 2 === 0), ...mid[1].filter((f, i) => i % 2 === 0), ...def[1].filter((f, i) => i % 2 === 0), ...goal[1].filter((f, i) => i % 2 === 0)]\n        team2 = [...atac[1].filter((f, i) => i % 2 !== 0), ...mid[1].filter((f, i) => i % 2 !== 0), ...def[1].filter((f, i) => i % 2 !== 0), ...goal[1].filter((f, i) => i % 2 !== 0)]\n        if (team1.length !== team2.length) {\n          team2 = [...team2, team1.slice(-1).pop()]\n          team1.pop()\n        }\n        // console.log('atac', atac);\n        // console.log('mid', mid);\n        // console.log('def', def);\n        // console.log('goal', goal);\n        // console.log('playersData', playersData);\n        scoreTeam1 = 0;\n        scoreTeam2 = 0;\n      }else if(myType === 'top'){\n        // console.log('BY TOP');\n        playersDataSheet.forEach(player => {\n          if (players.includes(player.id)) {\n            playersData[player.id] = player;\n          }\n        })\n        const playersRandom = Object.values(playersData).sort((a, b) => parseInt(b.note, 10) - parseInt(a.note, 10));\n        // console.log('playersRandom', playersRandom);\n        playersRandom.forEach( (a, i) => {\n          if( i%2 ){\n            team2 = [...team2, a];\n          }else{\n            team1 = [...team1, a];\n          }\n        })\n      }else{\n        // console.log('BY RANDOM');\n        const playersRandom = players.sort(() => 0.5 - Math.random());\n        team1 = playersRandom.slice(0, 6);\n        team2 = playersRandom.slice(6, 12);\n      }\n      setTeams([team1, team2]);\n      // console.log('team1', team1);\n      // console.log('team2', team2);\n      setModal(true)\n    }\n  }\n  const showTeams = () => {\n    if( players.length < 12 || teams.length < 2 ) {\n      addToast('noteams');\n    }else {\n      setModal(true)\n    }\n  }\n  const getPositions = (pos)=>{\n    switch (pos) {\n      case '1': return 'Att'\n      case '2': return 'Mid'\n      case '3': return 'Def'\n      case '4': return 'Gk'\n      default: return 'N/A'\n    }\n  }\n  const editPlayerData = async (payload) => {\n    let changes = {};\n    switch (payload.data.name){\n      case 'note': changes.note = payload.data.value; break\n      case 'phone': changes.phone = payload.data.value; break\n      case 'pozitiile': changes.pozitiile = payload.data.value; break\n      default: break\n    }\n    setEditPlayer({...editPlayer, ...changes})\n  }\n  const updatePlayerData = () => {\n    const errors = {};\n    if( editPlayer.note > 10 || editPlayer.note < 0 ) errors.nota = 'Nota jucatorului nu corespunde intervalului [0 ... 10]';\n    if( editPlayer.phone.match(/^[0-9]*$/g) === null ) errors.telefon = 'Numarul de telefon al jucatorului poate fin doar din cifre';\n    const pz = editPlayer.pozitiile.split('.');\n    const uniq = pz.includes(\"1\") && pz.includes(\"2\") && pz.includes(\"3\") && pz.includes(\"4\");\n    if( pz.length !== 4 || !uniq ) errors.pozitii = 'Pozitiile de joc nu corespund formatului \"1.2.3.4\"';\n    if( Object.keys(errors).length ){\n      addToast(\"errors\", errors);\n      return null\n    }\n    playersRows[editMode[0]].note = editPlayer.note;\n    playersRows[editMode[0]].phone = editPlayer.phone;\n    playersRows[editMode[0]].pozitiile = editPlayer.pozitiile;\n    playersRows[editMode[0]].save();\n    let cp = playersDataSheet.slice();\n    cp[editMode[0]] = {\n      ...cp[editMode[0]],\n      note: editPlayer.note,\n      phone: editPlayer.phone,\n      pozitiile: editPlayer.pozitiile,\n      id: editPlayer.phone,\n      idRow: editMode[0]\n    }\n    // console.log('cp after', cp[editMode[0]]);\n    setPlayersDataSheet(cp);\n    setEditMode([]);\n    setEditPlayer({});\n  }\n  const toggleEditMode = ( [editId] ) => {\n    if( localHash !== null && CryptoJS.MD5(localHash).toString() === 'b43c25877cb11b88bcf6341b90fdccab' ){\n      if( typeof editId !== \"undefined\" ){\n        setEditMode([editId]);\n        setEditPlayer(playersRows[editId]);\n      }else{\n        setEditMode([]);\n        setEditPlayer({});\n      }\n    }else{\n      let pass = prompt(\"Password:\", \"\");\n      if (pass !== null && CryptoJS.MD5(pass).toString() === 'b43c25877cb11b88bcf6341b90fdccab') {\n        localStorage.setItem('pass', pass);\n        if( typeof editId !== \"undefined\" ){\n          setEditMode([editId]);\n          setEditPlayer(playersRows[editId]);\n        }else{\n          setEditMode([]);\n          setEditPlayer({});\n        }\n      }else{\n        addToast('pass');\n        return null\n      }\n    }\n  }\n\n  // EFFECTS\n  useEffect(() => {\n    currentPage !== page && setPage(currentPage)\n  }, [currentPage, page, playersDataSheet])\n  // useEffect(() => {\n  //   console.log('playersDataSheet', playersDataSheet);\n  // }, [playersDataSheet])\n  // useEffect(() => {\n  //   console.log('editPlayer:', editPlayer);\n  // }, [editPlayer])\n\n  return (\n    <CRow>\n      {(playersDataSheet.length) ?\n      <CCol xl={12}>\n        <CCard>\n          <CCardHeader>\n            <CRow className=\"align-items-center\">\n              <CCol col=\"6\" sm=\"6\" md=\"6\" xl=\"6\" className=\"mb-3 mb-xl-0\">\n                <CButtonGroup>\n                  <CButton color=\"success\" onClick={()=>addToast('change')} >Jucatori selectati</CButton>\n                  <CButton color=\"danger\" onClick={()=>setPlayears([])} >Reseteaza lista</CButton>\n                </CButtonGroup>\n              </CCol>\n              <CCol col=\"6\" sm=\"6\" md=\"6\" xl=\"6\" className=\"mb-3 mb-xl-0 text-right\">\n                <CButtonGroup>\n                  <CButton color=\"success\" onClick={showTeams} >Afiseaza echipele</CButton>\n                  <CButton color=\"danger\" onClick={() => createTeams()}>Genereaza echipele</CButton>\n                </CButtonGroup>\n              </CCol>\n            </CRow>\n          </CCardHeader>\n          <CCardBody>\n          <CDataTable\n            items={playersDataSheet}\n            fields={[\n              { key: 'switch', label: 'Participa', _style: { width: '1%'}, sorter: true },\n              { key: 'name', _classes: 'font-weight-bold', _style: { width: '30%'} },\n              { key: 'phone', label: 'Telefon' },\n              { key: 'note', label: 'Nota' },\n              { key: 'pozitiile', label: 'Pozitii de joc' },\n              { key: 'show_details', label: '', _style: { width: '1%' }, filter: false }\n            ]}\n            tableFilter={{placeholder: \"nume | telefon\"}}\n            itemsPerPageSelect={{label: 'Jucaroti pe pagina', values:[10,20,50]}}\n            onPaginationChange={(e)=>{setPerpage(e)}}\n            hover\n            striped\n            itemsPerPage={perpage}\n            activePage={page}\n            scopedSlots = {{\n              'switch':\n                (item)=>{\n                  return(\n                    <td className=\"py-2\">\n                      <CSwitch size={'sm'} className={'mx-1'} shape={'pill'} color={'success'} variant={'opposite'} labelOn={'\\u2713'} labelOff={'\\u2715'}\n                               onClick={() => togglePlayer(item.id)}\n                               checked={players.includes(item.id)}\n                               onChange={()=>{}}\n                      />\n                    </td>\n                  )\n              },\n              'pozitiile':\n                (item)=>{\n                  return(\n                    <td className=\"py-2\">\n                      {item.pozitiile.split('.').map(p=>getPositions(p)).join('->')}\n                    </td>\n                  )\n              },\n              'show_details':\n                (item, index)=>{\n                    return (\n                    <td className=\"py-2\">\n                    <CButton\n                    color=\"primary\"\n                    variant=\"outline\"\n                    shape=\"square\"\n                    size=\"sm\"\n                    onClick={()=>{toggleDetails(index)}}\n                    >\n                      {details.includes(index) ? 'Hide' : 'Show'}\n                    </CButton>\n                    </td>\n                    )\n                },\n              'details':\n                (item, index)=>(\n                  <CCollapse show={details.includes(index)}>\n                    <CCardBody>\n                      <CRow>\n                        <CCol lg=\"8\" className=\"py-3\">\n                          <CInputGroup>\n                            <CInputGroupPrepend><CInputGroupText className={'bg-info text-white'}>Nota</CInputGroupText></CInputGroupPrepend>\n                            {editMode.includes(item.idRow)\n                              ? <CInput value={editPlayer.note} name=\"note\" type={'number'} min={0} max={10} onChange={(e) => editPlayerData({id: item.idRow, data: e.target})}/>\n                              : <CInput value={item.note} name=\"note\" disabled/>\n                            }\n                          </CInputGroup>\n                          <br/>\n                          <CInputGroup>\n                            <CInputGroupPrepend><CInputGroupText className={'bg-info text-white'}>Telefon</CInputGroupText></CInputGroupPrepend>\n                            {editMode.includes(item.idRow)\n                              ? <CInput value={editPlayer.phone} type={'number'} name=\"phone\" onChange={(e) => editPlayerData({id: item.idRow, data: e.target})}/>\n                              : <CInput value={item.phone} name=\"phone\" disabled />\n                            }\n                          </CInputGroup>\n                          <br/>\n                          <CInputGroup>\n                            <CInputGroupPrepend><CInputGroupText className={'bg-info text-white'}>Pozitii de joc</CInputGroupText></CInputGroupPrepend>\n                            {editMode.includes(item.idRow)\n                              ? <CInput value={editPlayer.pozitiile} name=\"pozitiile\" onChange={(e) => editPlayerData({id: item.idRow, data: e.target})}/>\n                              : <CInput value={item.pozitiile} name=\"pozitiile\" disabled/>\n                            }\n                          </CInputGroup>\n                          <CFormText className=\"help-block\">1: Att, 2: Mid, 3: Def, 4: Gk</CFormText>\n\n                          <br/>\n                          {editMode.includes(item.idRow)\n                            ?\n                            <CButtonGroup>\n                              <CButton color=\"success\" onClick={updatePlayerData}>Update</CButton>\n                              <CButton color=\"danger\" onClick={() => toggleEditMode([])}>Cancel</CButton>\n                            </CButtonGroup>\n                            :\n                            <CButton color=\"warning\" onClick={() => toggleEditMode([item.idRow])}>Edit</CButton>\n                          }\n                        </CCol>\n                        <CCol md=\"4\" className=\"py-3\">\n                          {( item.photo === 'default') ? 'No Image' : <CCardImg src={item.photo} /> }\n                        </CCol>\n                      </CRow>\n                    </CCardBody>\n                  </CCollapse>\n                )\n            }}\n          />\n          <CPagination\n            activePage={page}\n            onActivePageChange={pageChange}\n            pages={pages}\n            align=\"center\"\n          />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      : ''}\n      {Object.keys(toasters).map((toasterKey) => (\n        <CToaster\n          position={toasterKey}\n          key={'toaster' + toasterKey}\n        >\n          {\n            toasters[toasterKey].map((toast, key)=>{\n              return(\n                <CToast\n                  key={'toast' + key}\n                  show={true}\n                  autohide={toast.autohide}\n                  fade={toast.fade}\n                >\n                  <CToastHeader closeButton={toast.closeButton}>\n                    {['full', 'low', 'pass'].includes(toast.type) ? `Atentie!` : `Jucatori`}\n                  </CToastHeader>\n                  <CToastBody>\n                    {renderToast(toast)}\n                  </CToastBody>\n                </CToast>\n              )\n            })\n          }\n        </CToaster>\n      ))}\n      <CModal\n        show={modal}\n        onClose={setModal}\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Modal title</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          {(teams.length < 1) ? 'No teams' :\n            <CRow>\n              <CCol col=\"6\" className=\"bg-info py-3\">\n                {\n                  teams[0].map((pl, i) => {\n                    scoreTeam1 += parseInt(pl.note, 10);\n                    return <p\n                      key={pl.id}>{`${i + 1}: `}<b>{`${pl.name}`}</b> : {getPositions(pl.pozitiile.split('.')[0])} : {pl.note}\n                    </p>;\n                  })\n                }\n                <h3>Suma: {scoreTeam1}</h3>\n                <h5>Media: {(scoreTeam1 / 6).toFixed(2)}</h5>\n              </CCol>\n              <CCol col=\"6\" className=\"bg-warning py-3\">\n                {\n                  teams[1].map((pl, i) => {\n                    scoreTeam2 += parseInt(pl.note, 10);\n                    return <p\n                      key={pl.id}>{`${i + 1}: `}<b>{`${pl.name}`}</b> : {getPositions(pl.pozitiile.split('.')[0])} : {pl.note}\n                    </p>;\n                  })\n                }\n                <h4>Suma: {scoreTeam2}</h4>\n                <h5>Media: {(scoreTeam2 / 6).toFixed(2)}</h5>\n              </CCol>\n            </CRow>\n          }\n        </CModalBody>\n        <CModalFooter>\n          <CButtonGroup>\n            <CButton onClick={() => createTeams('position')} color=\"success\">Teams by Position</CButton>{' '}\n            <CButton onClick={() => createTeams('top')} color=\"danger\">Teams by Top</CButton>\n          </CButtonGroup>\n          <CButton\n            color=\"secondary\"\n            onClick={() => setModal(false)}\n          >Close</CButton>\n        </CModalFooter>\n      </CModal>\n    </CRow>\n  )\n}\n\nexport default Players\n"],"sourceRoot":""}